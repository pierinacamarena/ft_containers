typedef: keyword used to provide existing data types with a new name
	typedef <existing_name> <alias_name>
	e.g. 
		-typedef long long ll
		ll var;
		var = 30;

		-typedef int* ptr;
		ptr var;
		*var = 30;

typename: Can be used interchangeably with class. Used for templates
			- It is used for specifying that a dependent name in a template definition or declaration is a type.
				-a dependent name is a name that depends on the type or the value of a template parameter
				-The compiler will bind the dependent names when a template is instatiated
				-The compiler binds non dependent names when the template is is defined 

Metaprograming: 
Program: something that transforms data
Metaprogram: something that transforms programs, it might look at the structure of another program and create a new program
		-When a metraprogram looks at its own structure, that is called reflection
		-C++ code is essentially the application of compile time reflection
		-Metafunctions are not functions but classes
	Examples of regular function vs metafunction (value metafunction)
	[
		Regular function:
		int	int_identity(int x) {
			return x;
		}
		assert(42 == int_identity(42));

		Metafunction:
		template<int X> --> los arguments que recibe la metafuncion
		struct IntIdentity {
			static constexpre int value = X; --> lo que regresa la funcion
		}
		static_assert(42 == IntIdentity<42>::value);

		Generic identity function
		template<typename T>
		T identity(T x) {
			return x;
		}
		assert(42 == identity(42)); -> returned type will be an int
		assert(42ull == identity(42ull)); -> returned type will be unsigned long long
		
		Generic identity metafunction
		template<typename T, T Value>
		struct ValueIdentity {
			static constexpre T value = Value;
		}
		static_assert(42 == ValueIdentity<int, 42>::value);
		static_assert(42ull == ValueIdentity<unsigned long long, 42>::value);

		int sum(int x, int y)
		{
			return (x + y);
		}

		template<int X, int Y>
		struct IntSum {
			static constexpre int value = X + Y;
		};

		static_assert(42 == IntSum<10, 32>::value);
	]